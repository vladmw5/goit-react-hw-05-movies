{"version":3,"file":"static/js/293.32665897.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.jsx","pages/MoviePage.jsx","service/movieAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Fragment } from 'react';\n\nconst URL_FOR_POSTERS = 'https://image.tmdb.org/t/p/original/';\n\nconst MovieCard = ({ movie }) => {\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movie;\n  return (\n    <div>\n      <div>\n        {poster_path ? (\n          <img\n            width=\"270\"\n            src={`${URL_FOR_POSTERS}${poster_path.slice(1)}`}\n            alt={title}\n          />\n        ) : (\n          <h1>This film has no Poster</h1>\n        )}\n      </div>\n      <h2>{`${title} (${release_date?.split('-')[0]})`}</h2>\n      <p>\n        UserScore: <span>{`${Math.floor(vote_average * 10)}%`}</span>\n      </p>\n      {overview && (\n        <Fragment>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n        </Fragment>\n      )}\n      <h2>Genres</h2>\n      <ul>\n        {genres?.map(({ id, name }) => (\n          <li key={id}>{name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n\nexport default MovieCard;\n","import { useEffect, useState, Suspense } from 'react';\nimport {\n  useLocation,\n  useNavigate,\n  useParams,\n  Outlet,\n  Link,\n} from 'react-router-dom';\n\nimport api from 'service/movieAPI';\nimport routes from 'service/routes';\nimport Loader from 'components/Loader';\nimport MovieCard from 'components/MovieCard';\n\nconst MoviePage = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setLoading] = useState(false);\n  const navTo = useNavigate();\n  const location = useLocation();\n  const { movieId } = useParams();\n\n  const from = location.state?.from;\n\n  const goBack = () => navTo(from);\n\n  const { cast, reviews } = routes;\n\n  useEffect(() => {\n    setLoading(true);\n    api\n      .fetchMovieDetails(movieId)\n      .then(setMovie)\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  }, [movieId]);\n\n  return (\n    <main>\n      {/* Кнопка \"повернутись\" не буде відображена, якщо from не існує. */}\n      {from && (\n        <button type=\"button\" onClick={goBack}>\n          Go back\n        </button>\n      )}\n      <hr />\n      {isLoading ? <Loader /> : <MovieCard movie={movie} />}\n      <hr />\n      <Link to={cast} state={{ from }}>\n        Credits\n      </Link>\n      <br />\n      <Link to={reviews} state={{ from }}>\n        Reviews\n      </Link>\n      <hr />\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MoviePage;\n","const API_KEY = 'a5de4dd52c0a146855f7375f14408b0e';\nconst BASE_URL = `https://api.themoviedb.org/3/`;\n\nconst queryStrings = {\n  trending: () => `${BASE_URL}trending/all/day?api_key=${API_KEY}`,\n  search: (query, page = 1) =>\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n  details: id => `${BASE_URL}movie/${id}?api_key=${API_KEY}`,\n  credits: id => `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`,\n  reviews: id => `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`,\n};\n\n//Мені захотілося використати тут звичайний fetchAPI, щоб повторити його\nexport async function fetchTrending() {\n  const response = await fetch(queryStrings.trending());\n  if (!response.ok) {\n    return Promise.reject('Fetch Trending Movies Error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchByQuery(query, page = 1) {\n  if (!query) {\n    return Promise.reject('Fetch By Query: cannot make an empty query');\n  }\n  const response = await fetch(queryStrings.search(query, page));\n  if (!response.ok) {\n    return Promise.reject('Fetch By Query Error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchMovieDetails(id) {\n  if (!id) {\n    return Promise.reject('Fetch Movie Details: cannot query by this id ' + id);\n  }\n  const response = await fetch(queryStrings.details(id));\n  if (!response.ok) {\n    return Promise.reject('Fetch Movie Details: error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchMovieCredits(id) {\n  if (!id) {\n    return Promise.reject('Fetch Movie Credits: cannot query by this id ' + id);\n  }\n  const response = await fetch(queryStrings.credits(id));\n  if (!response.ok) {\n    return Promise.reject('Fetch Movie Credits: error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchMovieReviews(id) {\n  if (!id) {\n    return Promise.reject('Fetch Movie Reviews: cannot query by this id ' + id);\n  }\n  const response = await fetch(queryStrings.reviews(id));\n  if (!response.ok) {\n    return Promise.reject('Fetch Movie Reviews: error: ' + response.status);\n  }\n  return response.json();\n}\n\nconst api = {\n  fetchTrending,\n  fetchByQuery,\n  fetchMovieDetails,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["movie","poster_path","title","release_date","vote_average","overview","genres","width","src","slice","alt","split","Math","floor","Fragment","map","id","name","useState","setMovie","isLoading","setLoading","navTo","useNavigate","location","useLocation","movieId","useParams","from","state","cast","routes","reviews","useEffect","api","then","catch","console","error","finally","type","onClick","Loader","to","Suspense","fallback","API_KEY","BASE_URL","queryStrings","query","page","fetch","response","ok","Promise","reject","status","json","fetchTrending","fetchByQuery","fetchMovieDetails","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}