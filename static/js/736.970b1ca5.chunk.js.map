{"version":3,"file":"static/js/736.970b1ca5.chunk.js","mappings":"uMAsCA,UAhCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACbI,EAAAA,GAAAA,kBACqBH,GAClBI,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBR,EAAWQ,MACjCC,MAAMC,QAAQC,OACdC,SAAQ,kBAAMV,GAAa,QAC7B,CAACC,KAGF,+BACGF,IAAa,SAAC,IAAD,IACbF,KAAW,OAACA,QAAD,IAACA,GAAAA,EAASc,UAAU,sDAChC,+BACGd,QADH,IACGA,OADH,EACGA,EAASe,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACZ,2BACE,sCACU,0BAAOF,QAEjB,uBAAIC,MAJGC,a,mDC1BbC,EAAU,mCACVC,EAAQ,gCAERC,EACM,2BAASD,EAAT,oCAA6CD,IADnDE,EAEI,SAACC,GAAD,IAAQC,EAAR,uDAAe,EAAf,gBACHH,EADG,gCAC6BD,EAD7B,kBAC8CG,EAD9C,iBAC4DC,IAHhEF,EAIK,SAAAH,GAAE,gBAAOE,EAAP,iBAAwBF,EAAxB,oBAAsCC,IAJ7CE,EAKK,SAAAH,GAAE,gBAAOE,EAAP,iBAAwBF,EAAxB,4BAA8CC,IALrDE,EAMK,SAAAH,GAAE,gBAAOE,EAAP,iBAAwBF,EAAxB,4BAA8CC,IAI3D,aAAO,OAAP,oBAAO,oGACkBK,MAAMH,KADxB,WACCI,EADD,QAESC,GAFT,yCAGIC,QAAQC,OAAO,gCAAkCH,EAASI,SAH9D,gCAKEJ,EAASK,QALX,kEAQP,aAAO,OAAP,oBAAO,WAA4BR,GAA5B,wFAAmCC,EAAnC,+BAA0C,EAC1CD,EADA,yCAEIK,QAAQC,OAAO,+CAFnB,uBAIkBJ,MAAMH,EAAoBC,EAAOC,IAJnD,WAICE,EAJD,QAKSC,GALT,yCAMIC,QAAQC,OAAO,yBAA2BH,EAASI,SANvD,gCAQEJ,EAASK,QARX,mEAWP,aAAO,OAAP,oBAAO,WAAiCZ,GAAjC,0EACAA,EADA,yCAEIS,QAAQC,OAAO,gDAAkDV,IAFrE,uBAIkBM,MAAMH,EAAqBH,IAJ7C,WAICO,EAJD,QAKSC,GALT,yCAMIC,QAAQC,OAAO,+BAAiCH,EAASI,SAN7D,gCAQEJ,EAASK,QARX,kEAWP,aAAO,OAAP,oBAAO,WAAiCZ,GAAjC,0EACAA,EADA,yCAEIS,QAAQC,OAAO,gDAAkDV,IAFrE,uBAIkBM,MAAMH,EAAqBH,IAJ7C,WAICO,EAJD,QAKSC,GALT,yCAMIC,QAAQC,OAAO,+BAAiCH,EAASI,SAN7D,gCAQEJ,EAASK,QARX,kEAWP,aAAO,OAAP,oBAAO,WAAiCZ,GAAjC,0EACAA,EADA,yCAEIS,QAAQC,OAAO,gDAAkDV,IAFrE,uBAIkBM,MAAMH,EAAqBH,IAJ7C,WAICO,EAJD,QAKSC,GALT,yCAMIC,QAAQC,OAAO,+BAAiCH,EAASI,SAN7D,gCAQEJ,EAASK,QARX,kEAWP,IAAMvB,EAAM,CACVwB,cArDK,WAAP,gCAsDEC,aA9CK,SAAP,mCA+CEC,kBApCK,SAAP,mCAqCEC,kBA1BK,SAAP,mCA2BEC,kBAhBK,SAAP,oCAmBA","sources":["pages/Reviews.jsx","service/movieAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport api from 'service/movieAPI';\nimport Loader from 'components/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    api\n      .fetchMovieReviews(movieId)\n      .then(({ results }) => setReviews(results))\n      .catch(console.error)\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <section>\n      {isLoading && <Loader />}\n      {reviews && !reviews?.length && <h3>This film has no reviews</h3>}\n      <ul>\n        {reviews?.map(({ author, content, id }) => (\n          <li key={id}>\n            <h3>\n              Author: <span>{author}</span>\n            </h3>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default Reviews;\n","const API_KEY = 'a5de4dd52c0a146855f7375f14408b0e';\nconst BASE_URL = `https://api.themoviedb.org/3/`;\n\nconst queryStrings = {\n  trending: () => `${BASE_URL}trending/all/day?api_key=${API_KEY}`,\n  search: (query, page = 1) =>\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n  details: id => `${BASE_URL}movie/${id}?api_key=${API_KEY}`,\n  credits: id => `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`,\n  reviews: id => `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`,\n};\n\n//Мені захотілося використати тут звичайний fetchAPI, щоб повторити його\nexport async function fetchTrending() {\n  const response = await fetch(queryStrings.trending());\n  if (!response.ok) {\n    return Promise.reject('Fetch Trending Movies Error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchByQuery(query, page = 1) {\n  if (!query) {\n    return Promise.reject('Fetch By Query: cannot make an empty query');\n  }\n  const response = await fetch(queryStrings.search(query, page));\n  if (!response.ok) {\n    return Promise.reject('Fetch By Query Error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchMovieDetails(id) {\n  if (!id) {\n    return Promise.reject('Fetch Movie Details: cannot query by this id ' + id);\n  }\n  const response = await fetch(queryStrings.details(id));\n  if (!response.ok) {\n    return Promise.reject('Fetch Movie Details: error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchMovieCredits(id) {\n  if (!id) {\n    return Promise.reject('Fetch Movie Credits: cannot query by this id ' + id);\n  }\n  const response = await fetch(queryStrings.credits(id));\n  if (!response.ok) {\n    return Promise.reject('Fetch Movie Credits: error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchMovieReviews(id) {\n  if (!id) {\n    return Promise.reject('Fetch Movie Reviews: cannot query by this id ' + id);\n  }\n  const response = await fetch(queryStrings.reviews(id));\n  if (!response.ok) {\n    return Promise.reject('Fetch Movie Reviews: error: ' + response.status);\n  }\n  return response.json();\n}\n\nconst api = {\n  fetchTrending,\n  fetchByQuery,\n  fetchMovieDetails,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","api","then","results","catch","console","error","finally","length","map","author","content","id","API_KEY","BASE_URL","queryStrings","query","page","fetch","response","ok","Promise","reject","status","json","fetchTrending","fetchByQuery","fetchMovieDetails","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}