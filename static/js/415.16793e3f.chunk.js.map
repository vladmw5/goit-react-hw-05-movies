{"version":3,"file":"static/js/415.16793e3f.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","pages/Home.jsx","service/movieAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport routes from '../../service/routes';\n\nconst TrendingMovieList = ({ movies }) => {\n  const { pathname, search } = useLocation();\n\n  return (\n    <ul>\n      {movies.map(\n        ({ title, id }) =>\n          title && (\n            <li key={id}>\n              <Link\n                to={`/${routes.movies}/${id}`}\n                state={{ from: `${pathname}${search}` }}\n              >\n                {title}\n              </Link>\n            </li>\n          )\n      )}\n    </ul>\n  );\n};\n\nTrendingMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default TrendingMovieList;\n","import { useState, useEffect } from 'react';\n\nimport MovieList from 'components/MovieList';\nimport Loader from 'components/Loader';\nimport api from '../service/movieAPI';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    api\n      .fetchTrending()\n      .then(({ results }) => setMovies(results))\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <main>\n      <h1>Trending movies of the day</h1>\n      {isLoading ? <Loader /> : <MovieList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Home;\n","const API_KEY = 'a5de4dd52c0a146855f7375f14408b0e';\nconst BASE_URL = `https://api.themoviedb.org/3/`;\n\nconst queryStrings = {\n  trending: () => `${BASE_URL}trending/all/day?api_key=${API_KEY}`,\n  search: (query, page = 1) =>\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n  details: id => `${BASE_URL}movie/${id}?api_key=${API_KEY}`,\n  credits: id => `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`,\n  reviews: id => `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`,\n};\n\n//Мені захотілося використати тут звичайний fetchAPI, щоб повторити його\nexport async function fetchTrending() {\n  const response = await fetch(queryStrings.trending());\n  if (!response.ok) {\n    return Promise.reject('Fetch Trending Movies Error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchByQuery(query, page = 1) {\n  if (!query) {\n    return Promise.reject('Fetch By Query: cannot make an empty query');\n  }\n  const response = await fetch(queryStrings.search(query, page));\n  if (!response.ok) {\n    return Promise.reject('Fetch By Query Error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchMovieDetails(id) {\n  if (!id) {\n    return Promise.reject('Fetch Movie Details: cannot query by this id ' + id);\n  }\n  const response = await fetch(queryStrings.details(id));\n  if (!response.ok) {\n    return Promise.reject('Fetch Movie Details: error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchMovieCredits(id) {\n  if (!id) {\n    return Promise.reject('Fetch Movie Credits: cannot query by this id ' + id);\n  }\n  const response = await fetch(queryStrings.credits(id));\n  if (!response.ok) {\n    return Promise.reject('Fetch Movie Credits: error: ' + response.status);\n  }\n  return response.json();\n}\n\nexport async function fetchMovieReviews(id) {\n  if (!id) {\n    return Promise.reject('Fetch Movie Reviews: cannot query by this id ' + id);\n  }\n  const response = await fetch(queryStrings.reviews(id));\n  if (!response.ok) {\n    return Promise.reject('Fetch Movie Reviews: error: ' + response.status);\n  }\n  return response.json();\n}\n\nconst api = {\n  fetchTrending,\n  fetchByQuery,\n  fetchMovieDetails,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["movies","useLocation","pathname","search","map","title","id","to","routes","state","from","useState","setMovies","isLoading","setLoading","useEffect","api","then","results","catch","console","error","finally","API_KEY","BASE_URL","queryStrings","query","page","fetch","response","ok","Promise","reject","status","json","fetchTrending","fetchByQuery","fetchMovieDetails","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}